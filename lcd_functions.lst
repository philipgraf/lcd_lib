   1               		.file	"lcd_functions.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  73               	.global	lcd_enable
  75               	lcd_enable:
  76               		.stabd	46,0,0
   1:lcd_functions.c **** /**************************************************************************
   2:lcd_functions.c ****  *      
   3:lcd_functions.c ****  * File: lcd_functions.c
   4:lcd_functions.c ****  *       
   5:lcd_functions.c ****  * Author: Philip Graf
   6:lcd_functions.c ****  * Created: Nov 21 2011 21:15:25
   7:lcd_functions.c ****  * Last Changes: Nov 22 2011 01:10:02
   8:lcd_functions.c ****  * Description: all necessary function to interacted with the LCD-Display
   9:lcd_functions.c ****  *            
  10:lcd_functions.c ****  *************************************************************************/
  11:lcd_functions.c **** 
  12:lcd_functions.c **** #include <avr/io.h>
  13:lcd_functions.c **** #include "lcd_functions.h"
  14:lcd_functions.c **** #include <util/delay.h>
  15:lcd_functions.c **** 
  16:lcd_functions.c **** void lcd_init(){
  17:lcd_functions.c **** 
  18:lcd_functions.c **** 	_delay_ms(20);
  19:lcd_functions.c **** 	
  20:lcd_functions.c **** 	//set output pins
  21:lcd_functions.c **** 	uint8_t pins = (1<<LCD_SHIFT_CLOCK) |
  22:lcd_functions.c **** 				  		(1<<LCD_SHIFT_DATA)  |
  23:lcd_functions.c **** 				  		(1<<LCD_SHIFT_STR)   |
  24:lcd_functions.c **** 				  		(1<<LCD_SHIFT_OE)    |
  25:lcd_functions.c **** 				  		(1<<LCD_RS)          |
  26:lcd_functions.c **** 				  		(1<<LCD_RW)          |
  27:lcd_functions.c **** 				  		(1<<LCD_E);
  28:lcd_functions.c **** 
  29:lcd_functions.c **** 	LCD_DDR |= pins;
  30:lcd_functions.c **** 
  31:lcd_functions.c **** 	//set all to zero
  32:lcd_functions.c **** 	LCD_PORT &= ~pins;
  33:lcd_functions.c **** 
  34:lcd_functions.c **** 	lcd_sendTo( LCD_SET_FUNCTION | LCD_FUNCTION_8BIT);
  35:lcd_functions.c **** 
  36:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_FUNCTION | LCD_FUNCTION_8BIT | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x7 );
  37:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_DISPLAY | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF );
  38:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_ENTRY | LCD_ENTRY_INCREASE | LCD_ENTRY_NOSHIFT );
  39:lcd_functions.c **** 	lcd_sendCommand( LCD_CLEAR_SCREEN );
  40:lcd_functions.c **** 
  41:lcd_functions.c **** 	_delay_ms(20);
  42:lcd_functions.c **** }
  43:lcd_functions.c **** 
  44:lcd_functions.c **** void lcd_enable(){
  78               	.LM0:
  79               	.LFBB1:
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  45:lcd_functions.c **** 	LCD_PORT |= (1<< LCD_E);
  85               	.LM1:
  86 0000 969A      		sbi 50-0x20,6
  87               	.LBB68:
  88               	.LBB69:
  89               	.LBB70:
  90               	.LBB71:
  92               	.Ltext1:
   1:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  94               	.LM2:
  95 0002 86E0      		ldi r24,lo8(6)
  96               	/* #APP */
  97               	 ;  83 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
  98 0004 8A95      		1: dec r24
  99 0006 01F4      		brne 1b
 100               	 ;  0 "" 2
 101               	/* #NOAPP */
 102               	.LBE71:
 103               	.LBE70:
 104               	.LBE69:
 105               	.LBE68:
 107               	.Ltext2:
  46:lcd_functions.c **** 	_delay_us(20);
  47:lcd_functions.c **** 	LCD_PORT &= ~(1<< LCD_E);
 109               	.LM3:
 110 0008 9698      		cbi 50-0x20,6
 111               	/* epilogue start */
  48:lcd_functions.c **** }
 113               	.LM4:
 114 000a 0895      		ret
 116               	.Lscope1:
 118               		.stabd	78,0,0
 121               	.global	lcd_sendTo
 123               	lcd_sendTo:
 124               		.stabd	46,0,0
  49:lcd_functions.c **** 
  50:lcd_functions.c **** void lcd_sendTo(uint8_t data){
 126               	.LM5:
 127               	.LFBB2:
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
  51:lcd_functions.c **** 	uint8_t i;
  52:lcd_functions.c **** 	LCD_PORT |= (1<< LCD_SHIFT_STR);
 133               	.LM6:
 134 000c 929A      		sbi 50-0x20,2
  53:lcd_functions.c **** 	LCD_PORT &= ~(1<<LCD_SHIFT_OE);
 136               	.LM7:
 137 000e 9398      		cbi 50-0x20,3
 138 0010 20E0      		ldi r18,lo8(0)
 139 0012 30E0      		ldi r19,hi8(0)
  54:lcd_functions.c **** 	for(i=0;i<8;i++){
  55:lcd_functions.c **** 		LCD_PORT &= ~(1<<LCD_SHIFT_CLOCK);
  56:lcd_functions.c **** 		if(data & (1<<i)){
 141               	.LM8:
 142 0014 90E0      		ldi r25,lo8(0)
 143               	.L5:
  55:lcd_functions.c **** 		LCD_PORT &= ~(1<<LCD_SHIFT_CLOCK);
 145               	.LM9:
 146 0016 9098      		cbi 50-0x20,0
 148               	.LM10:
 149 0018 AC01      		movw r20,r24
 150 001a 022E      		mov r0,r18
 151 001c 00C0      		rjmp 2f
 152 001e 5595      	1:	asr r21
 153 0020 4795      		ror r20
 154 0022 0A94      	2:	dec r0
 155 0024 02F4      		brpl 1b
 156 0026 40FF      		sbrs r20,0
 157 0028 00C0      		rjmp .L3
  57:lcd_functions.c **** 			LCD_PORT |= (1<< LCD_SHIFT_DATA);
 159               	.LM11:
 160 002a 919A      		sbi 50-0x20,1
 161 002c 00C0      		rjmp .L4
 162               	.L3:
  58:lcd_functions.c **** 		}else{
  59:lcd_functions.c **** 			LCD_PORT &= ~(1<< LCD_SHIFT_DATA);
 164               	.LM12:
 165 002e 9198      		cbi 50-0x20,1
 166               	.L4:
  60:lcd_functions.c **** 		}
  61:lcd_functions.c **** 		LCD_PORT |= (1<< LCD_SHIFT_CLOCK);
 168               	.LM13:
 169 0030 909A      		sbi 50-0x20,0
 170 0032 2F5F      		subi r18,lo8(-(1))
 171 0034 3F4F      		sbci r19,hi8(-(1))
  54:lcd_functions.c **** 	for(i=0;i<8;i++){
 173               	.LM14:
 174 0036 2830      		cpi r18,8
 175 0038 3105      		cpc r19,__zero_reg__
 176 003a 01F4      		brne .L5
  62:lcd_functions.c **** 	}
  63:lcd_functions.c **** 	LCD_PORT &= ~(1<< LCD_SHIFT_STR);
 178               	.LM15:
 179 003c 9298      		cbi 50-0x20,2
  64:lcd_functions.c **** 	LCD_PORT |= (1<< LCD_SHIFT_OE);
 181               	.LM16:
 182 003e 939A      		sbi 50-0x20,3
  65:lcd_functions.c **** 	lcd_enable();
 184               	.LM17:
 185 0040 0E94 0000 		call lcd_enable
 186               	/* epilogue start */
  66:lcd_functions.c **** }
 188               	.LM18:
 189 0044 0895      		ret
 191               	.Lscope2:
 193               		.stabd	78,0,0
 196               	.global	lcd_sendChar
 198               	lcd_sendChar:
 199               		.stabd	46,0,0
  67:lcd_functions.c **** 
  68:lcd_functions.c **** void lcd_sendChar(uint8_t chara){
 201               	.LM19:
 202               	.LFBB3:
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
  69:lcd_functions.c **** 	LCD_PORT |= (1<< LCD_RS);
 208               	.LM20:
 209 0046 949A      		sbi 50-0x20,4
  70:lcd_functions.c **** 	LCD_PORT &= ~(1<< LCD_RW);
 211               	.LM21:
 212 0048 9598      		cbi 50-0x20,5
  71:lcd_functions.c **** 
  72:lcd_functions.c **** 	lcd_sendTo( chara );
 214               	.LM22:
 215 004a 0E94 0000 		call lcd_sendTo
 216               	.LBB76:
 217               	.LBB77:
 218               	.LBB78:
 219               	.LBB79:
 221               	.Ltext3:
 223               	.LM23:
 224 004e 8FE0      		ldi r24,lo8(15)
 225               	/* #APP */
 226               	 ;  83 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 227 0050 8A95      		1: dec r24
 228 0052 01F4      		brne 1b
 229               	 ;  0 "" 2
 230               	/* epilogue start */
 231               	/* #NOAPP */
 232               	.LBE79:
 233               	.LBE78:
 234               	.LBE77:
 235               	.LBE76:
 237               	.Ltext4:
  73:lcd_functions.c **** 
  74:lcd_functions.c **** 	_delay_us(45);
  75:lcd_functions.c **** }
 239               	.LM24:
 240 0054 0895      		ret
 242               	.Lscope3:
 244               		.stabd	78,0,0
 247               	.global	lcd_sendCommand
 249               	lcd_sendCommand:
 250               		.stabd	46,0,0
  76:lcd_functions.c **** 
  77:lcd_functions.c **** void lcd_sendCommand(uint8_t command){
 252               	.LM25:
 253               	.LFBB4:
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
  78:lcd_functions.c **** 	LCD_PORT &= ~(1<< LCD_RS);
 259               	.LM26:
 260 0056 9498      		cbi 50-0x20,4
  79:lcd_functions.c **** 	LCD_PORT &= ~(1<< LCD_RW);
 262               	.LM27:
 263 0058 9598      		cbi 50-0x20,5
  80:lcd_functions.c **** 
  81:lcd_functions.c **** 	lcd_sendTo( command );
 265               	.LM28:
 266 005a 0E94 0000 		call lcd_sendTo
 267               	.LBB84:
 268               	.LBB85:
 269               	.LBB86:
 270               	.LBB87:
 272               	.Ltext5:
 274               	.LM29:
 275 005e 8FE0      		ldi r24,lo8(15)
 276               	/* #APP */
 277               	 ;  83 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 278 0060 8A95      		1: dec r24
 279 0062 01F4      		brne 1b
 280               	 ;  0 "" 2
 281               	/* epilogue start */
 282               	/* #NOAPP */
 283               	.LBE87:
 284               	.LBE86:
 285               	.LBE85:
 286               	.LBE84:
 288               	.Ltext6:
  82:lcd_functions.c **** 
  83:lcd_functions.c **** 	_delay_us(45);
  84:lcd_functions.c **** }
 290               	.LM30:
 291 0064 0895      		ret
 293               	.Lscope4:
 295               		.stabd	78,0,0
 297               	.global	lcd_init
 299               	lcd_init:
 300               		.stabd	46,0,0
  16:lcd_functions.c **** void lcd_init(){
 302               	.LM31:
 303               	.LFBB5:
 304 0066 CF93      		push r28
 305 0068 DF93      		push r29
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 2 */
 309               	.L__stack_usage = 2
 310               	.LBB96:
 311               	.LBB97:
 312               	.LBB98:
 313               	.LBB99:
 315               	.Ltext7:
  84:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 317               	.LM32:
 318 006a C8E8      		ldi r28,lo8(5000)
 319 006c D3E1      		ldi r29,hi8(5000)
 320 006e CE01      		movw r24,r28
 321               	/* #APP */
 322               	 ;  105 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 323 0070 0197      		1: sbiw r24,1
 324 0072 01F4      		brne 1b
 325               	 ;  0 "" 2
 326               	/* #NOAPP */
 327               	.LBE99:
 328               	.LBE98:
 329               	.LBE97:
 330               	.LBE96:
 332               	.Ltext8:
  29:lcd_functions.c **** 	LCD_DDR |= pins;
 334               	.LM33:
 335 0074 81B3      		in r24,49-0x20
 336 0076 8F67      		ori r24,lo8(127)
 337 0078 81BB      		out 49-0x20,r24
  32:lcd_functions.c **** 	LCD_PORT &= ~pins;
 339               	.LM34:
 340 007a 82B3      		in r24,50-0x20
 341 007c 8078      		andi r24,lo8(-128)
 342 007e 82BB      		out 50-0x20,r24
  34:lcd_functions.c **** 	lcd_sendTo( LCD_SET_FUNCTION | LCD_FUNCTION_8BIT);
 344               	.LM35:
 345 0080 80E3      		ldi r24,lo8(48)
 346 0082 0E94 0000 		call lcd_sendTo
  36:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_FUNCTION | LCD_FUNCTION_8BIT | LCD_FUNCTION_2LINE | LCD_FUNCTION_5x7 );
 348               	.LM36:
 349 0086 88E3      		ldi r24,lo8(56)
 350 0088 0E94 0000 		call lcd_sendCommand
  37:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_DISPLAY | LCD_DISPLAY_ON | LCD_CURSOR_OFF | LCD_BLINK_OFF );
 352               	.LM37:
 353 008c 8CE0      		ldi r24,lo8(12)
 354 008e 0E94 0000 		call lcd_sendCommand
  38:lcd_functions.c **** 	lcd_sendCommand( LCD_SET_ENTRY | LCD_ENTRY_INCREASE | LCD_ENTRY_NOSHIFT );
 356               	.LM38:
 357 0092 86E0      		ldi r24,lo8(6)
 358 0094 0E94 0000 		call lcd_sendCommand
  39:lcd_functions.c **** 	lcd_sendCommand( LCD_CLEAR_SCREEN );
 360               	.LM39:
 361 0098 81E0      		ldi r24,lo8(1)
 362 009a 0E94 0000 		call lcd_sendCommand
 363               	.LBB100:
 364               	.LBB101:
 365               	.LBB102:
 366               	.LBB103:
 368               	.Ltext9:
 370               	.LM40:
 371               	/* #APP */
 372               	 ;  105 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 373 009e 2197      		1: sbiw r28,1
 374 00a0 01F4      		brne 1b
 375               	 ;  0 "" 2
 376               	/* epilogue start */
 377               	/* #NOAPP */
 378               	.LBE103:
 379               	.LBE102:
 380               	.LBE101:
 381               	.LBE100:
 383               	.Ltext10:
  42:lcd_functions.c **** }
 385               	.LM41:
 386 00a2 DF91      		pop r29
 387 00a4 CF91      		pop r28
 388 00a6 0895      		ret
 390               	.Lscope5:
 392               		.stabd	78,0,0
 394               	.global	lcd_clear
 396               	lcd_clear:
 397               		.stabd	46,0,0
  85:lcd_functions.c **** 
  86:lcd_functions.c **** lcd_clear(){
 399               	.LM42:
 400               	.LFBB6:
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
  87:lcd_functions.c **** 	lcd_sendCommand(LCD_CLEAR_SCREEN);
 406               	.LM43:
 407 00a8 81E0      		ldi r24,lo8(1)
 408 00aa 0E94 0000 		call lcd_sendCommand
 409               	.LBB108:
 410               	.LBB109:
 411               	.LBB110:
 412               	.LBB111:
 414               	.Ltext11:
 416               	.LM44:
 417 00ae 84EF      		ldi r24,lo8(500)
 418 00b0 91E0      		ldi r25,hi8(500)
 419               	/* #APP */
 420               	 ;  105 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 421 00b2 0197      		1: sbiw r24,1
 422 00b4 01F4      		brne 1b
 423               	 ;  0 "" 2
 424               	/* epilogue start */
 425               	/* #NOAPP */
 426               	.LBE111:
 427               	.LBE110:
 428               	.LBE109:
 429               	.LBE108:
 431               	.Ltext12:
  88:lcd_functions.c **** 	_delay_ms(2);
  89:lcd_functions.c **** }
 433               	.LM45:
 434 00b6 0895      		ret
 436               	.Lscope6:
 438               		.stabd	78,0,0
 440               	.global	lcd_home
 442               	lcd_home:
 443               		.stabd	46,0,0
  90:lcd_functions.c **** 
  91:lcd_functions.c **** lcd_home(){
 445               	.LM46:
 446               	.LFBB7:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
  92:lcd_functions.c **** 	lcd_sendCommand(LCD_HOME);
 452               	.LM47:
 453 00b8 82E0      		ldi r24,lo8(2)
 454 00ba 0E94 0000 		call lcd_sendCommand
 455               	.LBB116:
 456               	.LBB117:
 457               	.LBB118:
 458               	.LBB119:
 460               	.Ltext13:
 462               	.LM48:
 463 00be 84EF      		ldi r24,lo8(500)
 464 00c0 91E0      		ldi r25,hi8(500)
 465               	/* #APP */
 466               	 ;  105 "/usr/lib/gcc/avr/4.5.3/../../../../avr/include/util/delay_basic.h" 1
 467 00c2 0197      		1: sbiw r24,1
 468 00c4 01F4      		brne 1b
 469               	 ;  0 "" 2
 470               	/* epilogue start */
 471               	/* #NOAPP */
 472               	.LBE119:
 473               	.LBE118:
 474               	.LBE117:
 475               	.LBE116:
 477               	.Ltext14:
  93:lcd_functions.c **** 	_delay_ms(2);
  94:lcd_functions.c **** }
 479               	.LM49:
 480 00c6 0895      		ret
 482               	.Lscope7:
 484               		.stabd	78,0,0
 488               	.global	lcd_setCursor
 490               	lcd_setCursor:
 491               		.stabd	46,0,0
  95:lcd_functions.c **** 
  96:lcd_functions.c **** void lcd_setCursor(uint8_t col, uint8_t row){
 493               	.LM50:
 494               	.LFBB8:
 495               	/* prologue: function */
 496               	/* frame size = 0 */
 497               	/* stack size = 0 */
 498               	.L__stack_usage = 0
  97:lcd_functions.c **** 	uint8_t command;
  98:lcd_functions.c **** 
  99:lcd_functions.c **** 	switch(row){
 500               	.LM51:
 501 00c8 6130      		cpi r22,lo8(1)
 502 00ca 01F0      		breq .L14
 503 00cc 6230      		cpi r22,lo8(2)
 504 00ce 01F4      		brne .L12
 505 00d0 00C0      		rjmp .L17
 506               	.L14:
 100:lcd_functions.c **** 		case 1:
 101:lcd_functions.c **** 			command = LCD_SET_ADDR + LCD_ADDR_LINE1 + col;
 508               	.LM52:
 509 00d2 8058      		subi r24,lo8(-(-128))
 102:lcd_functions.c **** 			break;
 511               	.LM53:
 512 00d4 00C0      		rjmp .L16
 513               	.L17:
 103:lcd_functions.c **** 		case 2:
 104:lcd_functions.c **** 			command = LCD_SET_ADDR + LCD_ADDR_LINE2 + col;
 515               	.LM54:
 516 00d6 8054      		subi r24,lo8(-(-64))
 517               	.L16:
 105:lcd_functions.c **** 			break;
 106:lcd_functions.c **** 		default:
 107:lcd_functions.c **** 			return;
 108:lcd_functions.c **** 	}
 109:lcd_functions.c **** 	lcd_sendCommand(command);
 519               	.LM55:
 520 00d8 0E94 0000 		call lcd_sendCommand
 521               	.L12:
 522 00dc 0895      		ret
 527               	.Lscope8:
 529               		.stabd	78,0,0
 531               	.global	lcd_sendString
 533               	lcd_sendString:
 534               		.stabd	46,0,0
 110:lcd_functions.c **** }
 111:lcd_functions.c **** 
 112:lcd_functions.c **** void lcd_sendString(const char *string){
 536               	.LM56:
 537               	.LFBB9:
 538 00de EF92      		push r14
 539 00e0 FF92      		push r15
 540 00e2 CF93      		push r28
 541 00e4 DF93      		push r29
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 4 */
 545               	.L__stack_usage = 4
 547               	.LM57:
 548 00e6 E82E      		mov r14,r24
 549 00e8 E701      		movw r28,r14
 550 00ea 7E01      		movw r14,r28
 551 00ec F92E      		mov r15,r25
 552 00ee E701      		movw r28,r14
 113:lcd_functions.c **** 	while( *string != '\0')
 554               	.LM58:
 555 00f0 00C0      		rjmp .L19
 556               	.L20:
 114:lcd_functions.c **** 		lcd_sendChar(*string++);
 558               	.LM59:
 559 00f2 0E94 0000 		call lcd_sendChar
 560               	.L19:
 113:lcd_functions.c **** 	while( *string != '\0')
 562               	.LM60:
 563 00f6 8991      		ld r24,Y+
 564 00f8 8823      		tst r24
 565 00fa 01F4      		brne .L20
 566               	/* epilogue start */
 115:lcd_functions.c **** }
 568               	.LM61:
 569 00fc DF91      		pop r29
 570 00fe CF91      		pop r28
 571 0100 FF90      		pop r15
 572 0102 EF90      		pop r14
 573 0104 0895      		ret
 575               	.Lscope9:
 577               		.stabd	78,0,0
 579               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd_functions.c
     /tmp/cc47GLFp.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cc47GLFp.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cc47GLFp.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cc47GLFp.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc47GLFp.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc47GLFp.s:75     .text:0000000000000000 lcd_enable
     /tmp/cc47GLFp.s:123    .text:000000000000000c lcd_sendTo
     /tmp/cc47GLFp.s:198    .text:0000000000000046 lcd_sendChar
     /tmp/cc47GLFp.s:249    .text:0000000000000056 lcd_sendCommand
     /tmp/cc47GLFp.s:299    .text:0000000000000066 lcd_init
     /tmp/cc47GLFp.s:396    .text:00000000000000a8 lcd_clear
     /tmp/cc47GLFp.s:442    .text:00000000000000b8 lcd_home
     /tmp/cc47GLFp.s:490    .text:00000000000000c8 lcd_setCursor
     /tmp/cc47GLFp.s:533    .text:00000000000000de lcd_sendString

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
